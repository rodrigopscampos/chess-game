{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chess","require","HistItem","fen","move","player","this","startFenPosition","App","useState","chess","hist","setHist","setFen","restartGame","reset","handleMove","setTimeout","moves","length","computerMove","Math","floor","random","push","runCPUMove","to","className","draggable","dropOffBoard","width","position","onDrop","from","sourceSquare","targetSquare","promotion","onClick","last","undefined","load","newHist","slice","undoLastMove","map","item","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAIMA,EAAQC,EAAQ,IAEhBC,EAKJ,WAAYC,EAAaC,EAAcC,GAAiB,yBAJxDF,IAAc,GAIyC,KAHvDC,KAAe,GAGwC,KAFvDC,OAAiB,GAGfC,KAAKH,IAAMA,EACXG,KAAKF,KAAOA,EACZE,KAAKD,OAASA,GAIZE,EAAmB,2DA4FVC,EA3FO,WAAO,IAAD,EAEVC,mBACd,IAAIT,EAAMO,IADLG,EAFmB,sBAMFD,mBAAqB,IANnB,mBAMnBE,EANmB,KAMbC,EANa,OAQJH,mBAASC,EAAMP,OARX,mBAQnBA,EARmB,KAQdU,EARc,KAkBpBC,EAAc,WAClBJ,EAAMK,QACNH,EAAQ,IACRC,EAAON,IAoBHS,EAAa,SAACZ,GACdM,EAAMN,KAAKA,KACba,YAAW,WACT,IAAMC,EAAQR,EAAMQ,QAEhBA,EAAMC,OAAS,GApCN,SAACD,GAClB,IAAME,EAAeF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAC5DT,EAAMN,KAAKgB,GACXT,EAAKa,KAAK,IAAItB,EAASQ,EAAMP,MAAOiB,EAAc,QAClDP,EAAOH,EAAMP,OACbS,EAAQD,GAgCFc,CAAWP,KAEZ,GAEHL,EAAOH,EAAMP,OACbQ,EAAKa,KAAK,IAAItB,EAASQ,EAAMP,MAAOC,EAAKsB,GAAI,QAC7Cd,EAAQD,KAeZ,OACE,sBAAKgB,UAAU,cAAf,UACE,+CACA,cAAC,IAAD,CACEC,WAAW,EACXC,aAAc,QACdC,MAAO,IACPC,SAAU5B,EACV6B,OAAQ,SAAC5B,GAAD,OACNY,EAAW,CACTiB,KAAM7B,EAAK8B,aACXR,GAAItB,EAAK+B,aACTC,UAAW,SAIjB,wBAAQC,QAAS,kBAAMvB,KAAvB,mBACA,wBAAQuB,QAAS,kBA7DA,WACnB,IAAIN,EAAWpB,EAAKQ,OAAS,EAC7B,GAAIY,EAAW,EACbjB,QAEG,CACH,IAAIwB,EAAO3B,EAAKoB,GAAU5B,IAC1B,QAAaoC,IAATD,GACE5B,EAAM8B,KAAKF,GAAO,CACpB,IAAIG,EAAU9B,EAAK+B,MAAM,EAAGX,EAAW,GACvCnB,EAAQ6B,GACR5B,EAAOyB,KAkDYK,IAAvB,kBA1BA,gCACE,iDAEEhC,EAAKiC,KAAI,SAACC,EAAMC,GAAP,OAAiB,+BAAiBA,EAAjB,MAA2BD,EAAKxC,OAAhC,MAA2CwC,EAAKzC,OAAvC0C,aCnE9BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.01cdefec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Chessboard from \"chessboardjsx\";\nimport { ChessInstance, ShortMove } from \"chess.js\";\nconst Chess = require(\"chess.js\");\n\nclass HistItem {\n  fen: string = \"\";\n  move: string = \"\";\n  player: string = \"\";\n\n  constructor(fen: string, move: string, player: string) {\n    this.fen = fen;\n    this.move = move;\n    this.player = player;\n  }\n};\n\nconst startFenPosition = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\nconst App: React.FC = () => {\n\n  const [chess] = useState<ChessInstance>(\n    new Chess(startFenPosition)\n  );\n\n  const [hist, setHist] = useState<HistItem[]>([]);\n\n  const [fen, setFen] = useState(chess.fen());\n\n  const runCPUMove = (moves: string[]) => {\n    const computerMove = moves[Math.floor(Math.random() * moves.length)];\n    chess.move(computerMove);\n    hist.push(new HistItem(chess.fen(), computerMove, \"CPU\"));\n    setFen(chess.fen());\n    setHist(hist);\n  }\n\n  const restartGame = () => {\n    chess.reset();\n    setHist([]);\n    setFen(startFenPosition);\n  }\n\n  const undoLastMove = () => {\n    let position = hist.length - 3;\n    if (position < 0) {\n      restartGame();\n    }\n    else {\n      let last = hist[position].fen;\n      if (last !== undefined) {\n        if (chess.load(last)) {\n          let newHist = hist.slice(0, position + 1);\n          setHist(newHist);\n          setFen(last);\n        }\n      }\n    }\n  }\n\n  const handleMove = (move: ShortMove) => {\n    if (chess.move(move)) {\n      setTimeout(() => {\n        const moves = chess.moves();\n\n        if (moves.length > 0)\n          runCPUMove(moves);\n\n      }, 1);\n\n      setFen(chess.fen());\n      hist.push(new HistItem(chess.fen(), move.to, \"PL1\"));\n      setHist(hist);\n    }\n  };\n\n  const renderHist = () => {\n    return (\n      <div>\n        <span>Hist. Jogadas</span>\n        {\n          hist.map((item, index) => <li key={index}>{index} - {item.player} - {item.move}</li>)\n        }\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <h1>Rodrigo Chess</h1>\n      <Chessboard\n        draggable={true}\n        dropOffBoard={'trash'}\n        width={400}\n        position={fen}\n        onDrop={(move) =>\n          handleMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\"\n          })\n        }\n      />\n      <button onClick={() => restartGame()} >Reset</button>\n      <button onClick={() => undoLastMove()} >Undo</button>\n      {renderHist()}\n    </div>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}