{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chess","require","startFenPosition","App","useState","chess","hist","setHist","fen","setFen","handleMove","move","history","verbose","in_checkmate","alert","in_check","in_draw","in_stalemate","in_threefold_repetition","setTimeout","moves","length","computerMove","Math","floor","random","runCPUMove","className","draggable","dropOffBoard","width","position","onDrop","from","sourceSquare","to","targetSquare","promotion","onClick","reset","undo","map","item","index","color","piece","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAIMA,EAAQC,EAAQ,IAEhBC,EAAmB,2DAsFVC,EArFO,WAAO,IAAD,EAEVC,mBACd,IAAIJ,EAAME,IADLG,EAFmB,sBAMFD,mBAAgB,IANd,mBAMnBE,EANmB,KAMbC,EANa,OAQJH,mBAASC,EAAMG,OARX,mBAQnBA,EARmB,KAQdC,EARc,KA+BpBC,EAAa,SAACC,GACbN,EAAMM,KAAKA,KAGhBF,EAAOJ,EAAMG,OACbD,EAAQF,EAAMO,QAAQ,CAAEC,SAAS,KAE7BR,EAAMS,eAAgBC,MAAM,eACvBV,EAAMW,WAAYD,MAAM,UACxBV,EAAMY,UAAWF,MAAM,UACvBV,EAAMa,eAAgBH,MAAM,2BAC5BV,EAAMc,2BAA2BJ,MAAM,8BAEhDK,YAAW,WACT,IAAMC,EAAQhB,EAAMgB,QAChBA,EAAMC,OAAS,GApCJ,SAACD,GAClB,IAAME,EAAeF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAC5DjB,EAAMM,KAAKY,GACXd,EAAOJ,EAAMG,OACbD,EAAQF,EAAMO,QAAQ,CAAEC,SAAS,KAiC7Bc,CAAWN,KACZ,KAcL,OACE,sBAAKO,UAAU,cAAf,UACE,+CACA,cAAC,IAAD,CACEC,WAAW,EACXC,aAAc,QACdC,MAAO,IACPC,SAAUxB,EACVyB,OAAQ,SAACtB,GAAD,OACND,EAAW,CACTwB,KAAMvB,EAAKwB,aACXC,GAAIzB,EAAK0B,aACTC,UAAW,SAIjB,wBAAQC,QAAS,kBA5DnBlC,EAAMmC,QACNjC,EAAQ,SACRE,EAAOP,IA0DL,mBACA,wBAAQqC,QAAS,kBAvDnBlC,EAAMoC,OACNpC,EAAMoC,OACNhC,EAAOJ,EAAMG,YACbD,EAAQF,EAAMO,QAAQ,CAAEC,SAAS,MAoD/B,kBA1BA,gCACE,iDAEEP,EAAKoC,KAAI,SAACC,EAAMC,GAAP,OAAiB,+BAAiBA,EAAjB,MAAyC,KAAdD,EAAKE,MAAe,MAAQ,MAAvD,MAAiEF,EAAKG,MAAOH,EAAKP,KAAzEQ,aCjD9BG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ef7e87c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Chessboard from \"chessboardjsx\";\nimport { ChessInstance, ShortMove } from \"chess.js\";\nconst Chess = require(\"chess.js\");\n\nconst startFenPosition = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\nconst App: React.FC = () => {\n\n  const [chess] = useState<ChessInstance>(\n    new Chess(startFenPosition)\n  );\n\n  const [hist, setHist] = useState<any[]>([]);\n\n  const [fen, setFen] = useState(chess.fen());\n\n  const runCPUMove = (moves: string[]) => {\n    const computerMove = moves[Math.floor(Math.random() * moves.length)];\n    chess.move(computerMove);\n    setFen(chess.fen());\n    setHist(chess.history({ verbose: true }));\n  }\n\n  const restartGame = () => {\n    chess.reset();\n    setHist([]);\n    setFen(startFenPosition);\n  }\n\n  const undoLastMove = () => {\n    chess.undo()\n    chess.undo()\n    setFen(chess.fen())\n    setHist(chess.history({ verbose: true }));\n    return;\n  }\n\n  const handleMove = (move: ShortMove) => {\n    if (!chess.move(move))\n      return;\n\n    setFen(chess.fen());\n    setHist(chess.history({ verbose: true }));\n\n    if (chess.in_checkmate()) alert('Cheque-Mate');\n    else if (chess.in_check()) alert('Cheque');\n    else if (chess.in_draw()) alert('Empate');\n    else if (chess.in_stalemate()) alert('Empate por jogo travado');\n    else if (chess.in_threefold_repetition()) alert('Empate por repetição')\n\n    setTimeout(() => {\n      const moves = chess.moves();\n      if (moves.length > 0)\n        runCPUMove(moves);\n    }, 1);\n  };\n\n  const renderHist = () => {\n    return (\n      <div>\n        <span>Hist. Jogadas</span>\n        {\n          hist.map((item, index) => <li key={index}>{index} - {item.color == 'w' ? \"PL1\" : \"CPU\"}  -{item.piece}{item.to}</li>)\n        }\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-center\">\n      <h1>Rodrigo Chess</h1>\n      <Chessboard\n        draggable={true}\n        dropOffBoard={'trash'}\n        width={400}\n        position={fen}\n        onDrop={(move) =>\n          handleMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\"\n          })\n        }\n      />\n      <button onClick={() => restartGame()} >Reset</button>\n      <button onClick={() => undoLastMove()} >Undo</button>\n      {renderHist()}\n    </div>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}